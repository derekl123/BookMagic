{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Book/Book.js","components/Booklist/Booklist.js","components/SearchResults/SearchResults.js","components/Favoritelist/Favoritelist.js","components/utils/BookSearch.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","handleTermChange","bind","handleSubmit","className","onSubmit","this","onChange","id","placeholder","e","setState","target","value","preventDefault","onSearch","React","Component","Book","handleAction","addBook","removeBook","isRemoval","onClick","onAdd","searchedBook","onRemove","alt","src","smallThumbnail","title","authors","Booklist","searchedBooks","map","key","SearchResults","Favoritelist","handleNameChange","onNameChange","maxLength","defaultValue","favoriteBooks","BookSearch","search","fetch","method","then","response","json","jsonResponse","console","log","items","item","volumeInfo","imageLinks","thumbnail","App","updatePlaylistName","Search","searchResults","favoriteName","book","books","find","push","filter","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27aa8464.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      term: ''\n    }\n   this.handleTermChange = this.handleTermChange.bind(this);\n   this.handleSubmit = this.handleSubmit.bind(this);\n  }\n    render(){\n\n        return <div className=\"search_container\">\n                  <div className=\"search_field\">\n          <h2 className=\"page_title\">Book Magician</h2>\n          <form onSubmit={this.handleSubmit}>\n        <input onChange={this.handleTermChange} className=\"origin_search\" id=\"trend\" placeholder=\"What is Trending?\" />\n        <button className=\"search_button\">Find Books!</button>\n        </form>\n        </div>\n      </div>\n    }\n    \n\n    handleTermChange(e){\n      this.setState({term: e.target.value});\n    }\n\n    handleSubmit(e){\n      e.preventDefault();\n      this.props.onSearch(this.state.term);\n    }\n   \n}\n\nexport default SearchBar;","import React from 'react';\nimport './Book.css'\n\nclass Book extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleAction = this.handleAction.bind(this);\n        this.addBook = this.addBook.bind(this);\n        this.removeBook = this.removeBook.bind(this);\n    }\n    handleAction(){\n        if(this.props.isRemoval){\n            return <button onClick={this.addBook} className=\"handle_action\">+</button>\n        } else {\n            return <button onClick={this.removeBook}  className=\"handle_action\">-</button>\n        }\n    }\n\n    addBook(){\n        this.props.onAdd(this.props.searchedBook)\n    }\n\n    removeBook(){\n        this.props.onRemove(this.props.searchedBook)\n    }\n  \n  \n    render(){\n        return <div className='Book_container'>\n                    <div className=\"book_card\">\n                        <img className=\"Cover_image\" alt=\"cover\" src={this.props.searchedBook.smallThumbnail}></img>\n                        <div className=\"book_row\">\n                        <div className=\"Book_information\">\n                            <span className=\"title\">{this.props.searchedBook.title}</span>\n                            <span className=\"author\">{this.props.searchedBook.authors}</span>\n                            </div>\n                            </div>\n                                                        <span className=\"handle_button\">{this.handleAction()}</span>\n\n                    </div>\n            </div>\n            \n    }\n}\n\nexport default Book;","import React from 'react';\nimport Book from '../Book/Book'\nimport './Booklist.css'\n\nclass Booklist extends React.Component {\n    render(){\n        return <div className=\"Booklist\">\n            \n          {\n               this.props.searchedBooks && this.props.searchedBooks.map(searchedBook => {\n                return <Book onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} searchedBook={searchedBook} key={searchedBook.id} />\n            })\n          }\n         \n    </div>\n    }\n}\n\nexport default Booklist;\n\n","import React from 'react';\nimport Booklist from '../Booklist/Booklist'\nimport './SearchResults.css';\n\n\n\nclass SearchResults extends React.Component {\n    render(){\n        return <div className=\"box_container\">\n            <h2 className=\"title_container\">Results</h2>\n            <Booklist onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={true} searchedBooks={this.props.searchedBooks} />\n        </div>\n    \n    }\n}\n\nexport default SearchResults;\n\n","import React from 'react';\nimport Booklist from '../Booklist/Booklist'\nimport './Favoritelist.css'\n\nclass Favoritelist extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n   \n\n    handleNameChange(e){\n       this.props.onNameChange(e.target.value);\n    }\n    \n    render(){\n        return <div className=\"Favorites\">\n                <input maxLength=\"15\" className=\"playlistInput\" onChange={this.handleNameChange} defaultValue={'New Playlist'}/>\n        <Booklist onRemove={this.props.onRemove} isRemoval={false} searchedBooks={this.props.favoriteBooks} />\n        </div>\n        \n}\n\n}\n\nexport default Favoritelist;","let APIkey = 'AIzaSyAvro2083BHAsn79LvEQOnLEaJ8TlEcgOM';\n\nconst BookSearch = {\n    search(term) {\n        return fetch(`https://www.googleapis.com/books/v1/volumes?q=${term}&key=${APIkey}`, { method: 'GET',}).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            console.log(jsonResponse);\n            if(!jsonResponse.items){\n                return [];\n            }\n            return jsonResponse.items.map(item => ({\n                id: item.id,\n                title: item.volumeInfo.title,\n                authors: item.volumeInfo.authors,\n                smallThumbnail: item.volumeInfo?.imageLinks?.smallThumbnail,\n                thumbnail: item.volumeInfo?.imageLinks?.thumbnail,\n            }));\n            \n        })\n    \n    }\n}\n\n\nexport default BookSearch;\n\n","import React from 'react'\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Favoritelist from '../Favoritelist/Favoritelist'\nimport BookSearch from '../utils/BookSearch'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addBook = this.addBook.bind(this);\n    this.removeBook = this.removeBook.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.Search = this.Search.bind(this);\n    this.state = {\n      searchResults: [],\n      favoriteName: 'Change Title',\n      favoriteBooks: [],\n    }\n  }\n\n    addBook(book){\n      let books = this.state.favoriteBooks;\n      if(books.find(searchedBook => book === searchedBook)){\n        return;\n      } else {\n        books.push(book);\n        this.setState({searchedBooks: books})\n      }\n    }\n    \nremoveBook(book){\n  let books = this.state.favoriteBooks;\n  books = books.filter(searchedBook => searchedBook.id !== book.id)\n  this.setState({favoriteBooks: books})\n}\n    \nupdatePlaylistName(name){\nthis.setState({ favoriteName: name})\n}\n\nSearch(term){\nBookSearch.search(term).then(searchResults => {\n  this.setState({searchResults: searchResults});\n})\n}\n\n  \n  render() {\n    return <div className=\"App\">\n      <SearchBar onSearch={this.Search} />\n      <div className=\"results_container\">\n        <SearchResults onAdd={this.addBook} isRemoval={true} searchedBooks={this.state.searchResults} />\n        <Favoritelist onNameChange={this.updatePlaylistName} onRemove={this.removeBook} favoriteBooks={this.state.favoriteBooks} favoriteName={this.state.favoriteName} />\n      </div>\n    </div>\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}